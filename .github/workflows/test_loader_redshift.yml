
name: test loader redshift and postgres

on:
  pull_request:
    branches:
      - master
      - devel
  workflow_dispatch:

env:
  DESTINATION__POSTGRES__CREDENTIALS: postgres://loader@dlttests.cwz0jfxu0m7m.eu-central-1.rds.amazonaws.com:5432/dlt_data
  DESTINATION__REDSHIFT__CREDENTIALS: postgres://loader@3.73.90.3:5439/chat_analytics_rasa_ci
  # password is the same so it will be shared
  CREDENTIALS__PASSWORD: ${{ secrets.PG_PASSWORD }}

  DATASET_NAME: workflowtest

jobs:

  run_lint:
    name: Tests redshift loader
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:

      - name: Check out
        uses: actions/checkout@master

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.10.x"

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.2
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: |
      #     echo "::set-output name=dir::$(poetry env info -p)"
      #     echo "$(poetry env info -p)"

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          # path: ${{ steps.pip-cache.outputs.dir }}
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-redshift

      - name: Install dependencies
        # if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction -E redshift

      # - name: Install self
      #   run: poetry install --no-interaction

      - run: |
          RUNTIME__LOG_LEVEL=ERROR poetry run pytest tests --ignore=tests/common --ignore=tests/normalize --ignore=tests/load/bigquery --ignore=tests/dbt_runner -k '(not bigquery)'
        if: runner.os != 'Windows'
        name: Run tests Linux/MAC
      - run: |
          poetry run pytest tests --ignore=tests/common --ignore=tests/normalize --ignore=tests/load/bigquery --ignore=tests/dbt_runner -m "not forked" -k "(not bigquery)"
        if: runner.os == 'Windows'
        name: Run tests Windows
        shell: cmd
