GqsCLRcxICSN0DGSdPHwgASVHUgAAAAAAACMFWRidC5jb250cmFjdHMucmVzdWx0c5SMElJ1bkV4ZWN1dGlvblJlc3VsdJSTlCmBlH2UKIwHcmVzdWx0c5RdlChoAIwJUnVuUmVzdWx0lJOUKYGUfZQojAZzdGF0dXOUaACMCVJ1blN0YXR1c5STlIwHc3VjY2Vzc5SFlFKUjAZ0aW1pbmeUXZQoaACMClRpbWluZ0luZm+Uk5QpgZR9lCiMBG5hbWWUjAdjb21waWxllIwKc3RhcnRlZF9hdJSMCGRhdGV0aW1llIwIZGF0ZXRpbWWUk5RDCgfnARcRNQwGb7WUhZRSlIwMY29tcGxldGVkX2F0lGgcQwoH5wEXETUMBoiclIWUUpR1YmgUKYGUfZQoaBeMB2V4ZWN1dGWUaBloHEMKB+cBFxE1DAaJZpSFlFKUaCBoHEMKB+cBFxE1DAhENZSFlFKUdWJljAl0aHJlYWRfaWSUjAhUaHJlYWQtOZSMDmV4ZWN1dGlvbl90aW1llEc/vvSUAAAAAIwQYWRhcHRlcl9yZXNwb25zZZR9lCiMCF9tZXNzYWdllIwLQ1JFQVRFIFZJRVeUjARjb2RllIwLQ1JFQVRFIFZJRVeUjA1yb3dzX2FmZmVjdGVklEr/////dYwHbWVzc2FnZZRoM4wIZmFpbHVyZXOUTowEbm9kZZSMHGRidC5jb250cmFjdHMuZ3JhcGguY29tcGlsZWSUjBFDb21waWxlZE1vZGVsTm9kZZSTlCmBlH2UKIwHcmF3X3NxbJRYXAEAAHdpdGggc291cmNlIGFzICgKCiAgICB7Iy0KICAgIE5vcm1hbGx5IHdlIHdvdWxkIHNlbGVjdCBmcm9tIHRoZSB0YWJsZSBoZXJlLCBidXQgd2UgYXJlIHVzaW5nIHNlZWRzIHRvIGxvYWQKICAgIG91ciBkYXRhIGluIHRoaXMgcHJvamVjdAogICAgI30KICAgIHNlbGVjdCAqIGZyb20ge3sgcmVmKCdyYXdfb3JkZXJzJykgfX0KCiksCgpyZW5hbWVkIGFzICgKCiAgICBzZWxlY3QKICAgICAgICBpZCBhcyBvcmRlcl9pZCwKICAgICAgICB1c2VyX2lkIGFzIGN1c3RvbWVyX2lkLAogICAgICAgIG9yZGVyX2RhdGUsCiAgICAgICAgc3RhdHVzCgogICAgZnJvbSBzb3VyY2UKCikKCnNlbGVjdCAqIGZyb20gcmVuYW1lZJSMCGNvbXBpbGVklIiMCGRhdGFiYXNllIwIZGx0X2RhdGGUjAZzY2hlbWGUjCV0ZXN0X2NiYWNmM2IyMDE5MTdhYzA2MTgzM2Y1NmI4M2VlYTI3lIwDZnFulF2UKIwLamFmZmxlX3Nob3CUjAdzdGFnaW5nlIwKc3RnX29yZGVyc5RljAl1bmlxdWVfaWSUjBxtb2RlbC5qYWZmbGVfc2hvcC5zdGdfb3JkZXJzlIwMcGFja2FnZV9uYW1llIwLamFmZmxlX3Nob3CUjAlyb290X3BhdGiUjCsvaG9tZS9ydWRvbGZpeC9zcmMvZGx0L19zdG9yYWdlL2phZmZsZV9zaG9wlIwEcGF0aJSMFnN0YWdpbmcvc3RnX29yZGVycy5zcWyUjBJvcmlnaW5hbF9maWxlX3BhdGiUjB1tb2RlbHMvc3RhZ2luZy9zdGdfb3JkZXJzLnNxbJRoF4wKc3RnX29yZGVyc5SMDXJlc291cmNlX3R5cGWUjA5kYnQubm9kZV90eXBlc5SMCE5vZGVUeXBllJOUjAVtb2RlbJSFlFKUjAVhbGlhc5SMCnN0Z19vcmRlcnOUjAhjaGVja3N1bZSME2RidC5jb250cmFjdHMuZmlsZXOUjAhGaWxlSGFzaJSTlCmBlH2UKGgXjAZzaGEyNTaUaF+MQGFmZmZhOWNiYzU3ZTVmZDJjZjU4OThlYmY1NzFkNDQ0YTYyYzlkNmQ3OTI5ZDgxMzNkMzA1NjdmYjlhMmNlOTeUdWKMBmNvbmZpZ5SMIGRidC5jb250cmFjdHMuZ3JhcGgubW9kZWxfY29uZmlnlIwKTm9kZUNvbmZpZ5STlCmBlH2UKIwGX2V4dHJhlH2UjAdlbmFibGVklIhoXU5oRE5oQk6MBHRhZ3OUXZSMBG1ldGGUfZSMDG1hdGVyaWFsaXplZJSMBHZpZXeUjAxwZXJzaXN0X2RvY3OUfZSMCXBvc3RfaG9va5RdlIwIcHJlX2hvb2uUXZSMB3F1b3RpbmeUfZSMDGNvbHVtbl90eXBlc5R9lIwMZnVsbF9yZWZyZXNolE6MCnVuaXF1ZV9rZXmUTowQb25fc2NoZW1hX2NoYW5nZZSMBmlnbm9yZZSMBmdyYW50c5R9lHVijA1fZXZlbnRfc3RhdHVzlH2UjAtub2RlX3N0YXR1c5RoAIwNUnVubmluZ1N0YXR1c5STlIwJZXhlY3V0aW5nlIWUUpRzaHBdlIwEcmVmc5RdlF2UjApyYXdfb3JkZXJzlGFhjAdzb3VyY2VzlF2UjAdtZXRyaWNzlF2UjApkZXBlbmRzX29ulIwaZGJ0LmNvbnRyYWN0cy5ncmFwaC5wYXJzZWSUjAlEZXBlbmRzT26Uk5QpgZR9lCiMBm1hY3Jvc5RdlCiMHm1hY3JvLmRidC5sb2FkX2NhY2hlZF9yZWxhdGlvbpSMJG1hY3JvLmRidC5tYWtlX2ludGVybWVkaWF0ZV9yZWxhdGlvbpSMHm1hY3JvLmRidC5tYWtlX2JhY2t1cF9yZWxhdGlvbpSME21hY3JvLmRidC5ydW5faG9va3OUjCFtYWNyby5kYnQuZHJvcF9yZWxhdGlvbl9pZl9leGlzdHOUjBNtYWNyby5kYnQuc3RhdGVtZW50lIwXbWFjcm8uZGJ0LnNob3VsZF9yZXZva2WUjBZtYWNyby5kYnQuYXBwbHlfZ3JhbnRzlIwWbWFjcm8uZGJ0LnBlcnNpc3RfZG9jc5RljAVub2Rlc5RdlIwbc2VlZC5qYWZmbGVfc2hvcC5yYXdfb3JkZXJzlGF1YowLZGVzY3JpcHRpb26UjACUjAdjb2x1bW5zlH2UKIwIb3JkZXJfaWSUaJiMCkNvbHVtbkluZm+Uk5QpgZR9lChoF4wIb3JkZXJfaWSUaKtorGhyfZSMCWRhdGFfdHlwZZROjAVxdW90ZZROaHBdlGhtfZR1YmgLaLEpgZR9lChoF4wGc3RhdHVzlGiraKxocn2UaLZOaLdOaHBdlGhtfZR1YnVocn2UjARkb2NzlIwcZGJ0LmNvbnRyYWN0cy5ncmFwaC51bnBhcnNlZJSMBERvY3OUk5QpgZR9lIwEc2hvd5SIc2KMCnBhdGNoX3BhdGiUjCdqYWZmbGVfc2hvcDovL21vZGVscy9zdGFnaW5nL3NjaGVtYS55bWyUjA1jb21waWxlZF9wYXRolIw5dGFyZ2V0L2NvbXBpbGVkL2phZmZsZV9zaG9wL21vZGVscy9zdGFnaW5nL3N0Z19vcmRlcnMuc3FslIwKYnVpbGRfcGF0aJSMNHRhcmdldC9ydW4vamFmZmxlX3Nob3AvbW9kZWxzL3N0YWdpbmcvc3RnX29yZGVycy5zcWyUjAhkZWZlcnJlZJSJjBF1bnJlbmRlcmVkX2NvbmZpZ5R9lGh0jAR2aWV3lHOMCmNyZWF0ZWRfYXSUR0HY87JgN95njBBjb25maWdfY2FsbF9kaWN0lH2UjAxjb21waWxlZF9zcWyUWAYBAAB3aXRoIHNvdXJjZSBhcyAoCiAgICBzZWxlY3QgKiBmcm9tICJkbHRfZGF0YSIuInRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjciLiJyYXdfb3JkZXJzIgoKKSwKCnJlbmFtZWQgYXMgKAoKICAgIHNlbGVjdAogICAgICAgIGlkIGFzIG9yZGVyX2lkLAogICAgICAgIHVzZXJfaWQgYXMgY3VzdG9tZXJfaWQsCiAgICAgICAgb3JkZXJfZGF0ZSwKICAgICAgICBzdGF0dXMKCiAgICBmcm9tIHNvdXJjZQoKKQoKc2VsZWN0ICogZnJvbSByZW5hbWVklIwTZXh0cmFfY3Rlc19pbmplY3RlZJSIjApleHRyYV9jdGVzlF2UjA1yZWxhdGlvbl9uYW1llIw/ImRsdF9kYXRhIi4idGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyIuInN0Z19vcmRlcnMilIwRX3ByZV9pbmplY3RlZF9zcWyUTnVijAthZ2F0ZV90YWJsZZROdWJoCCmBlH2UKGgLaBBoEV2UKGgUKYGUfZQoaBdoGGgZaBxDCgfnARcRNQwGYJWUhZRSlGggaBxDCgfnARcRNQwHMIqUhZRSlHViaBQpgZR9lChoF2gmaBloHEMKB+cBFxE1DAcySpSFlFKUaCBoHEMKB+cBFxE1DAhOGpSFlFKUdWJlaC2MCFRocmVhZC04lGgvRz/Ac9AAAAAAaDB9lChoMowLQ1JFQVRFIFZJRVeUaDSMC0NSRUFURSBWSUVXlGg2Sv////91aDdo82g4Tmg5aDwpgZR9lChoP1hFAQAAd2l0aCBzb3VyY2UgYXMgKAoKICAgIHsjLQogICAgTm9ybWFsbHkgd2Ugd291bGQgc2VsZWN0IGZyb20gdGhlIHRhYmxlIGhlcmUsIGJ1dCB3ZSBhcmUgdXNpbmcgc2VlZHMgdG8gbG9hZAogICAgb3VyIGRhdGEgaW4gdGhpcyBwcm9qZWN0CiAgICAjfQogICAgc2VsZWN0ICogZnJvbSB7eyByZWYoJ3Jhd19jdXN0b21lcnMnKSB9fQoKKSwKCnJlbmFtZWQgYXMgKAoKICAgIHNlbGVjdAogICAgICAgIGlkIGFzIGN1c3RvbWVyX2lkLAogICAgICAgIGZpcnN0X25hbWUsCiAgICAgICAgbGFzdF9uYW1lCgogICAgZnJvbSBzb3VyY2UKCikKCnNlbGVjdCAqIGZyb20gcmVuYW1lZJRoQYhoQowIZGx0X2RhdGGUaESMJXRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjeUaEZdlCiMC2phZmZsZV9zaG9wlIwHc3RhZ2luZ5SMDXN0Z19jdXN0b21lcnOUZWhLjB9tb2RlbC5qYWZmbGVfc2hvcC5zdGdfY3VzdG9tZXJzlGhNjAtqYWZmbGVfc2hvcJRoT4wrL2hvbWUvcnVkb2xmaXgvc3JjL2RsdC9fc3RvcmFnZS9qYWZmbGVfc2hvcJRoUYwZc3RhZ2luZy9zdGdfY3VzdG9tZXJzLnNxbJRoU4wgbW9kZWxzL3N0YWdpbmcvc3RnX2N1c3RvbWVycy5zcWyUaBeMDXN0Z19jdXN0b21lcnOUaFZoXGhdjA1zdGdfY3VzdG9tZXJzlGhfaGIpgZR9lChoF4wGc2hhMjU2lGhfjEA2ZjE4YTI5MjA0ZGFkMWRlNmRiYjBjMjg4MTQ0YzQ5OTA3NDJlMGExZTA2NWMzYjJhNjdiNWY5ODMzNGMyMmJhlHViaGdoaimBlH2UKGhtfZRob4hoXU5oRE5oQk5ocF2UaHJ9lGh0jAR2aWV3lGh2fZRoeF2UaHpdlGh8fZRofn2UaIBOaIFOaIKMBmlnbm9yZZRohH2UdWJohn2UaIhojXNocF2UaI9dlF2UjA1yYXdfY3VzdG9tZXJzlGFhaJNdlGiVXZRol2iaKYGUfZQoaJ1dlChon2igaKFoomijaKRopWimaKdlaKhdlIwec2VlZC5qYWZmbGVfc2hvcC5yYXdfY3VzdG9tZXJzlGF1YmiraKxorX2UjAtjdXN0b21lcl9pZJRosSmBlH2UKGgXjAtjdXN0b21lcl9pZJRoq2isaHJ9lGi2Tmi3TmhwXZRobX2UdWJzaHJ9lGjBaMQpgZR9lGjHiHNiaMiMJ2phZmZsZV9zaG9wOi8vbW9kZWxzL3N0YWdpbmcvc2NoZW1hLnltbJRoyow8dGFyZ2V0L2NvbXBpbGVkL2phZmZsZV9zaG9wL21vZGVscy9zdGFnaW5nL3N0Z19jdXN0b21lcnMuc3FslGjMjDd0YXJnZXQvcnVuL2phZmZsZV9zaG9wL21vZGVscy9zdGFnaW5nL3N0Z19jdXN0b21lcnMuc3FslGjOiWjPfZRodIwEdmlld5RzaNJHQdjzsmA3yv1o032UaNWM73dpdGggc291cmNlIGFzICgKICAgIHNlbGVjdCAqIGZyb20gImRsdF9kYXRhIi4idGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyIuInJhd19jdXN0b21lcnMiCgopLAoKcmVuYW1lZCBhcyAoCgogICAgc2VsZWN0CiAgICAgICAgaWQgYXMgY3VzdG9tZXJfaWQsCiAgICAgICAgZmlyc3RfbmFtZSwKICAgICAgICBsYXN0X25hbWUKCiAgICBmcm9tIHNvdXJjZQoKKQoKc2VsZWN0ICogZnJvbSByZW5hbWVklGjXiGjYXZRo2oxCImRsdF9kYXRhIi4idGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyIuInN0Z19jdXN0b21lcnMilGjcTnViaN1OdWJoCCmBlH2UKGgLaBBoEV2UKGgUKYGUfZQoaBdoGGgZaBxDCgfnARcRNQwGfTiUhZRSlGggaBxDCgfnARcRNQwGnYiUhZRSlHViaBQpgZR9lChoF2gmaBloHEMKB+cBFxE1DAaegZSFlFKUaCBoHEMKB+cBFxE1DAhS/5SFlFKUdWJlaC2MCVRocmVhZC0xMJRoL0c/vytYAAAAAGgwfZQoaDKMC0NSRUFURSBWSUVXlGg0jAtDUkVBVEUgVklFV5RoNkr/////dWg3aksBAABoOE5oOWg8KYGUfZQoaD9YuQEAAHdpdGggc291cmNlIGFzICgKICAgIAogICAgeyMtCiAgICBOb3JtYWxseSB3ZSB3b3VsZCBzZWxlY3QgZnJvbSB0aGUgdGFibGUgaGVyZSwgYnV0IHdlIGFyZSB1c2luZyBzZWVkcyB0byBsb2FkCiAgICBvdXIgZGF0YSBpbiB0aGlzIHByb2plY3QKICAgICN9CiAgICBzZWxlY3QgKiBmcm9tIHt7IHJlZigncmF3X3BheW1lbnRzJykgfX0KCiksCgpyZW5hbWVkIGFzICgKCiAgICBzZWxlY3QKICAgICAgICBpZCBhcyBwYXltZW50X2lkLAogICAgICAgIG9yZGVyX2lkLAogICAgICAgIHBheW1lbnRfbWV0aG9kLAoKICAgICAgICAtLSBgYW1vdW50YCBpcyBjdXJyZW50bHkgc3RvcmVkIGluIGNlbnRzLCBzbyB3ZSBjb252ZXJ0IGl0IHRvIGRvbGxhcnMKICAgICAgICBhbW91bnQgLyAxMDAgYXMgYW1vdW50CgogICAgZnJvbSBzb3VyY2UKCikKCnNlbGVjdCAqIGZyb20gcmVuYW1lZJRoQYhoQowIZGx0X2RhdGGUaESMJXRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjeUaEZdlCiMC2phZmZsZV9zaG9wlIwHc3RhZ2luZ5SMDHN0Z19wYXltZW50c5RlaEuMHm1vZGVsLmphZmZsZV9zaG9wLnN0Z19wYXltZW50c5RoTYwLamFmZmxlX3Nob3CUaE+MKy9ob21lL3J1ZG9sZml4L3NyYy9kbHQvX3N0b3JhZ2UvamFmZmxlX3Nob3CUaFGMGHN0YWdpbmcvc3RnX3BheW1lbnRzLnNxbJRoU4wfbW9kZWxzL3N0YWdpbmcvc3RnX3BheW1lbnRzLnNxbJRoF4wMc3RnX3BheW1lbnRzlGhWaFxoXYwMc3RnX3BheW1lbnRzlGhfaGIpgZR9lChoF4wGc2hhMjU2lGhfjEBlYjg5OTkzODI1OGQxZmJhMjdmY2E3MTZhN2MzMzQxMTk5MTJhMmY5NjAxMjgyMDI2MDk3YTdiNmNlOGNmY2QylHViaGdoaimBlH2UKGhtfZRob4hoXU5oRE5oQk5ocF2UaHJ9lGh0jAR2aWV3lGh2fZRoeF2UaHpdlGh8fZRofn2UaIBOaIFOaIKMBmlnbm9yZZRohH2UdWJohn2UaIhojXNocF2UaI9dlF2UjAxyYXdfcGF5bWVudHOUYWFok12UaJVdlGiXaJopgZR9lChonV2UKGifaKBooWiiaKNopGilaKZop2VoqF2UjB1zZWVkLmphZmZsZV9zaG9wLnJhd19wYXltZW50c5RhdWJoq2isaK19lCiMCnBheW1lbnRfaWSUaLEpgZR9lChoF4wKcGF5bWVudF9pZJRoq2isaHJ9lGi2Tmi3TmhwXZRobX2UdWKMDnBheW1lbnRfbWV0aG9klGixKYGUfZQoaBeMDnBheW1lbnRfbWV0aG9klGiraKxocn2UaLZOaLdOaHBdlGhtfZR1YnVocn2UaMFoxCmBlH2UaMeIc2JoyIwnamFmZmxlX3Nob3A6Ly9tb2RlbHMvc3RhZ2luZy9zY2hlbWEueW1slGjKjDt0YXJnZXQvY29tcGlsZWQvamFmZmxlX3Nob3AvbW9kZWxzL3N0YWdpbmcvc3RnX3BheW1lbnRzLnNxbJRozIw2dGFyZ2V0L3J1bi9qYWZmbGVfc2hvcC9tb2RlbHMvc3RhZ2luZy9zdGdfcGF5bWVudHMuc3FslGjOiWjPfZRodIwEdmlld5RzaNJHQdjzsmA3909o032UaNVYXwEAAHdpdGggc291cmNlIGFzICgKICAgIHNlbGVjdCAqIGZyb20gImRsdF9kYXRhIi4idGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyIuInJhd19wYXltZW50cyIKCiksCgpyZW5hbWVkIGFzICgKCiAgICBzZWxlY3QKICAgICAgICBpZCBhcyBwYXltZW50X2lkLAogICAgICAgIG9yZGVyX2lkLAogICAgICAgIHBheW1lbnRfbWV0aG9kLAoKICAgICAgICAtLSBgYW1vdW50YCBpcyBjdXJyZW50bHkgc3RvcmVkIGluIGNlbnRzLCBzbyB3ZSBjb252ZXJ0IGl0IHRvIGRvbGxhcnMKICAgICAgICBhbW91bnQgLyAxMDAgYXMgYW1vdW50CgogICAgZnJvbSBzb3VyY2UKCikKCnNlbGVjdCAqIGZyb20gcmVuYW1lZJRo14ho2F2UaNqMQSJkbHRfZGF0YSIuInRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjciLiJzdGdfcGF5bWVudHMilGjcTnViaN1OdWJoCCmBlH2UKGgLaBBoEV2UKGgUKYGUfZQoaBdoGGgZaBxDCgfnARcRNQwIeNqUhZRSlGggaBxDCgfnARcRNQwIz5+UhZRSlHViaBQpgZR9lChoF2gmaBloHEMKB+cBFxE1DAjRFJSFlFKUaCBoHEMKB+cBFxE1DAocX5SFlFKUdWJlaC1oLmgvRz+9FfgAAAAAaDB9lChoMowJU0VMRUNUIDk5lGg0jAZTRUxFQ1SUaDZLY3VoN2qpAQAAaDhOaDloPCmBlH2UKGg/WMkDAAB7JSBzZXQgcGF5bWVudF9tZXRob2RzID0gWydjcmVkaXRfY2FyZCcsICdjb3Vwb24nLCAnYmFua190cmFuc2ZlcicsICdnaWZ0X2NhcmQnXSAlfQoKd2l0aCBvcmRlcnMgYXMgKAoKICAgIHNlbGVjdCAqIGZyb20ge3sgcmVmKCdzdGdfb3JkZXJzJykgfX0KCiksCgpwYXltZW50cyBhcyAoCgogICAgc2VsZWN0ICogZnJvbSB7eyByZWYoJ3N0Z19wYXltZW50cycpIH19CgopLAoKb3JkZXJfcGF5bWVudHMgYXMgKAoKICAgIHNlbGVjdAogICAgICAgIG9yZGVyX2lkLAoKICAgICAgICB7JSBmb3IgcGF5bWVudF9tZXRob2QgaW4gcGF5bWVudF9tZXRob2RzIC0lfQogICAgICAgIHN1bShjYXNlIHdoZW4gcGF5bWVudF9tZXRob2QgPSAne3sgcGF5bWVudF9tZXRob2QgfX0nIHRoZW4gYW1vdW50IGVsc2UgMCBlbmQpIGFzIHt7IHBheW1lbnRfbWV0aG9kIH19X2Ftb3VudCwKICAgICAgICB7JSBlbmRmb3IgLSV9CgogICAgICAgIHN1bShhbW91bnQpIGFzIHRvdGFsX2Ftb3VudAoKICAgIGZyb20gcGF5bWVudHMKCiAgICBncm91cCBieSBvcmRlcl9pZAoKKSwKCmZpbmFsIGFzICgKCiAgICBzZWxlY3QKICAgICAgICBvcmRlcnMub3JkZXJfaWQsCiAgICAgICAgb3JkZXJzLmN1c3RvbWVyX2lkLAogICAgICAgIG9yZGVycy5vcmRlcl9kYXRlLAogICAgICAgIG9yZGVycy5zdGF0dXMsCgogICAgICAgIHslIGZvciBwYXltZW50X21ldGhvZCBpbiBwYXltZW50X21ldGhvZHMgLSV9CgogICAgICAgIG9yZGVyX3BheW1lbnRzLnt7IHBheW1lbnRfbWV0aG9kIH19X2Ftb3VudCwKCiAgICAgICAgeyUgZW5kZm9yIC0lfQoKICAgICAgICBvcmRlcl9wYXltZW50cy50b3RhbF9hbW91bnQgYXMgYW1vdW50CgogICAgZnJvbSBvcmRlcnMKCgogICAgbGVmdCBqb2luIG9yZGVyX3BheW1lbnRzCiAgICAgICAgb24gb3JkZXJzLm9yZGVyX2lkID0gb3JkZXJfcGF5bWVudHMub3JkZXJfaWQKCikKCnNlbGVjdCAqIGZyb20gZmluYWyUaEGIaEKMCGRsdF9kYXRhlGhEjCV0ZXN0X2NiYWNmM2IyMDE5MTdhYzA2MTgzM2Y1NmI4M2VlYTI3lGhGXZQojAtqYWZmbGVfc2hvcJSMBm9yZGVyc5RlaEuMGG1vZGVsLmphZmZsZV9zaG9wLm9yZGVyc5RoTYwLamFmZmxlX3Nob3CUaE+MKy9ob21lL3J1ZG9sZml4L3NyYy9kbHQvX3N0b3JhZ2UvamFmZmxlX3Nob3CUaFGMCm9yZGVycy5zcWyUaFOMEW1vZGVscy9vcmRlcnMuc3FslGgXjAZvcmRlcnOUaFZoXGhdjAZvcmRlcnOUaF9oYimBlH2UKGgXjAZzaGEyNTaUaF+MQDUzOTUwMjM1ZDhlMjk2OTBkMjU5ZTk1ZWU0OWJkYTZhNWI3OTExYjQ0YzczOWI3MzhhNjQ2ZGM2MDE0YmNmY2SUdWJoZ2hqKYGUfZQoaG19lGhviGhdTmhETmhCTmhwXZRocn2UaHSMBXRhYmxllGh2fZRoeF2UaHpdlGh8fZRofn2UaIBOaIFOaIKMBmlnbm9yZZRohH2UdWJohn2UaIhojXNocF2UaI9dlChdlIwKc3RnX29yZGVyc5RhXZSMDHN0Z19wYXltZW50c5RhZWiTXZRolV2UaJdomimBlH2UKGidXZQoaJ9ooGihaKNoomikjBhtYWNyby5kYnQuY3JlYXRlX2luZGV4ZXOUaKVopminZWioXZQojBxtb2RlbC5qYWZmbGVfc2hvcC5zdGdfb3JkZXJzlIwebW9kZWwuamFmZmxlX3Nob3Auc3RnX3BheW1lbnRzlGV1YmirjF5UaGlzIHRhYmxlIGhhcyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBvcmRlcnMsIGFzIHdlbGwgYXMgc29tZSBkZXJpdmVkIGZhY3RzIGJhc2VkIG9uIHBheW1lbnRzlGitfZQoaK9osSmBlH2UKGgXjAhvcmRlcl9pZJRoq4woVGhpcyBpcyBhIHVuaXF1ZSBpZGVudGlmaWVyIGZvciBhbiBvcmRlcpRocn2UaLZOaLdOaHBdlGhtfZR1YmojAQAAaLEpgZR9lChoF4wLY3VzdG9tZXJfaWSUaKuMIkZvcmVpZ24ga2V5IHRvIHRoZSBjdXN0b21lcnMgdGFibGWUaHJ9lGi2Tmi3TmhwXZRobX2UdWKMCm9yZGVyX2RhdGWUaLEpgZR9lChoF4wKb3JkZXJfZGF0ZZRoq4wkRGF0ZSAoVVRDKSB0aGF0IHRoZSBvcmRlciB3YXMgcGxhY2VklGhyfZRotk5ot05ocF2UaG19lHViaAtosSmBlH2UKGgXjAZzdGF0dXOUaKtYAQQAAE9yZGVycyBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgc3RhdHVzZXM6Cgp8IHN0YXR1cyAgICAgICAgIHwgZGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwtLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwKfCBwbGFjZWQgICAgICAgICB8IFRoZSBvcmRlciBoYXMgYmVlbiBwbGFjZWQgYnV0IGhhcyBub3QgeWV0IGxlZnQgdGhlIHdhcmVob3VzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfAp8IHNoaXBwZWQgICAgICAgIHwgVGhlIG9yZGVyIGhhcyBiZW4gc2hpcHBlZCB0byB0aGUgY3VzdG9tZXIgYW5kIGlzIGN1cnJlbnRseSBpbiB0cmFuc2l0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8CnwgY29tcGxldGVkICAgICAgfCBUaGUgb3JkZXIgaGFzIGJlZW4gcmVjZWl2ZWQgYnkgdGhlIGN1c3RvbWVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKfCByZXR1cm5fcGVuZGluZyB8IFRoZSBjdXN0b21lciBoYXMgaW5kaWNhdGVkIHRoYXQgdGhleSB3b3VsZCBsaWtlIHRvIHJldHVybiB0aGUgb3JkZXIsIGJ1dCBpdCBoYXMgbm90IHlldCBiZWVuIHJlY2VpdmVkIGF0IHRoZSB3YXJlaG91c2UgfAp8IHJldHVybmVkICAgICAgIHwgVGhlIG9yZGVyIGhhcyBiZWVuIHJldHVybmVkIGJ5IHRoZSBjdXN0b21lciBhbmQgcmVjZWl2ZWQgYXQgdGhlIHdhcmVob3VzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8lGhyfZRotk5ot05ocF2UaG19lHVijAZhbW91bnSUaLEpgZR9lChoF4wGYW1vdW50lGirjB9Ub3RhbCBhbW91bnQgKEFVRCkgb2YgdGhlIG9yZGVylGhyfZRotk5ot05ocF2UaG19lHVijBJjcmVkaXRfY2FyZF9hbW91bnSUaLEpgZR9lChoF4wSY3JlZGl0X2NhcmRfYW1vdW50lGirjDFBbW91bnQgb2YgdGhlIG9yZGVyIChBVUQpIHBhaWQgZm9yIGJ5IGNyZWRpdCBjYXJklGhyfZRotk5ot05ocF2UaG19lHVijA1jb3Vwb25fYW1vdW50lGixKYGUfZQoaBeMDWNvdXBvbl9hbW91bnSUaKuMLEFtb3VudCBvZiB0aGUgb3JkZXIgKEFVRCkgcGFpZCBmb3IgYnkgY291cG9ulGhyfZRotk5ot05ocF2UaG19lHVijBRiYW5rX3RyYW5zZmVyX2Ftb3VudJRosSmBlH2UKGgXjBRiYW5rX3RyYW5zZmVyX2Ftb3VudJRoq4wzQW1vdW50IG9mIHRoZSBvcmRlciAoQVVEKSBwYWlkIGZvciBieSBiYW5rIHRyYW5zZmVylGhyfZRotk5ot05ocF2UaG19lHVijBBnaWZ0X2NhcmRfYW1vdW50lGixKYGUfZQoaBeMEGdpZnRfY2FyZF9hbW91bnSUaKuML0Ftb3VudCBvZiB0aGUgb3JkZXIgKEFVRCkgcGFpZCBmb3IgYnkgZ2lmdCBjYXJklGhyfZRotk5ot05ocF2UaG19lHVidWhyfZRowWjEKYGUfZRox4hzYmjIjB9qYWZmbGVfc2hvcDovL21vZGVscy9zY2hlbWEueW1slGjKjC10YXJnZXQvY29tcGlsZWQvamFmZmxlX3Nob3AvbW9kZWxzL29yZGVycy5zcWyUaMyMKHRhcmdldC9ydW4vamFmZmxlX3Nob3AvbW9kZWxzL29yZGVycy5zcWyUaM6JaM99lGh0jAV0YWJsZZRzaNJHQdjzsmA0cvto032UaNVYswQAAAoKd2l0aCBvcmRlcnMgYXMgKAoKICAgIHNlbGVjdCAqIGZyb20gImRsdF9kYXRhIi4idGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyIuInN0Z19vcmRlcnMiCgopLAoKcGF5bWVudHMgYXMgKAoKICAgIHNlbGVjdCAqIGZyb20gImRsdF9kYXRhIi4idGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyIuInN0Z19wYXltZW50cyIKCiksCgpvcmRlcl9wYXltZW50cyBhcyAoCgogICAgc2VsZWN0CiAgICAgICAgb3JkZXJfaWQsCgogICAgICAgIHN1bShjYXNlIHdoZW4gcGF5bWVudF9tZXRob2QgPSAnY3JlZGl0X2NhcmQnIHRoZW4gYW1vdW50IGVsc2UgMCBlbmQpIGFzIGNyZWRpdF9jYXJkX2Ftb3VudCwKICAgICAgICBzdW0oY2FzZSB3aGVuIHBheW1lbnRfbWV0aG9kID0gJ2NvdXBvbicgdGhlbiBhbW91bnQgZWxzZSAwIGVuZCkgYXMgY291cG9uX2Ftb3VudCwKICAgICAgICBzdW0oY2FzZSB3aGVuIHBheW1lbnRfbWV0aG9kID0gJ2JhbmtfdHJhbnNmZXInIHRoZW4gYW1vdW50IGVsc2UgMCBlbmQpIGFzIGJhbmtfdHJhbnNmZXJfYW1vdW50LAogICAgICAgIHN1bShjYXNlIHdoZW4gcGF5bWVudF9tZXRob2QgPSAnZ2lmdF9jYXJkJyB0aGVuIGFtb3VudCBlbHNlIDAgZW5kKSBhcyBnaWZ0X2NhcmRfYW1vdW50LAogICAgICAgIHN1bShhbW91bnQpIGFzIHRvdGFsX2Ftb3VudAoKICAgIGZyb20gcGF5bWVudHMKCiAgICBncm91cCBieSBvcmRlcl9pZAoKKSwKCmZpbmFsIGFzICgKCiAgICBzZWxlY3QKICAgICAgICBvcmRlcnMub3JkZXJfaWQsCiAgICAgICAgb3JkZXJzLmN1c3RvbWVyX2lkLAogICAgICAgIG9yZGVycy5vcmRlcl9kYXRlLAogICAgICAgIG9yZGVycy5zdGF0dXMsCgogICAgICAgIG9yZGVyX3BheW1lbnRzLmNyZWRpdF9jYXJkX2Ftb3VudCwKCiAgICAgICAgb3JkZXJfcGF5bWVudHMuY291cG9uX2Ftb3VudCwKCiAgICAgICAgb3JkZXJfcGF5bWVudHMuYmFua190cmFuc2Zlcl9hbW91bnQsCgogICAgICAgIG9yZGVyX3BheW1lbnRzLmdpZnRfY2FyZF9hbW91bnQsCgogICAgICAgIG9yZGVyX3BheW1lbnRzLnRvdGFsX2Ftb3VudCBhcyBhbW91bnQKCiAgICBmcm9tIG9yZGVycwoKCiAgICBsZWZ0IGpvaW4gb3JkZXJfcGF5bWVudHMKICAgICAgICBvbiBvcmRlcnMub3JkZXJfaWQgPSBvcmRlcl9wYXltZW50cy5vcmRlcl9pZAoKKQoKc2VsZWN0ICogZnJvbSBmaW5hbJRo14ho2F2UaNqMOyJkbHRfZGF0YSIuInRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjciLiJvcmRlcnMilGjcTnViaN1OdWJoCCmBlH2UKGgLaA2MBWVycm9ylIWUUpRoEV2UaC2MCVRocmVhZC0xMZRoL0c/wlIUAAAAAGgwfZRoN1gjAwAAQ29tcGlsYXRpb24gRXJyb3IgaW4gbW9kZWwgY3VzdG9tZXJzIChtb2RlbHMvY3VzdG9tZXJzLnNxbCkKICAKICAgICAgICAgICAgICAgIFRoZSBzb3VyY2UgYW5kIHRhcmdldCBzY2hlbWFzIG9uIHRoaXMgaW5jcmVtZW50YWwgbW9kZWwgYXJlIG91dCBvZiBzeW5jIQogICAgICAgICAgICAgICAgVGhleSBjYW4gYmUgcmVjb25jaWxlZCBpbiBzZXZlcmFsIHdheXM6CiAgICAgICAgICAgICAgICAgIC0gc2V0IHRoZSBgb25fc2NoZW1hX2NoYW5nZWAgY29uZmlnIHRvIGVpdGhlciBhcHBlbmRfbmV3X2NvbHVtbnMgb3Igc3luY19hbGxfY29sdW1ucywgZGVwZW5kaW5nIG9uIHlvdXIgc2l0dWF0aW9uLgogICAgICAgICAgICAgICAgICAtIFJlLXJ1biB0aGUgaW5jcmVtZW50YWwgbW9kZWwgd2l0aCBgZnVsbF9yZWZyZXNoOiBUcnVlYCB0byB1cGRhdGUgdGhlIHRhcmdldCBzY2hlbWEuCiAgICAgICAgICAgICAgICAgIC0gdXBkYXRlIHRoZSBzY2hlbWEgbWFudWFsbHkgYW5kIHJlLXJ1biB0aGUgcHJvY2Vzcy4KICAgICAgICAgICAgCiAgCiAgPiBpbiBtYWNybyBwcm9jZXNzX3NjaGVtYV9jaGFuZ2VzIChtYWNyb3MvbWF0ZXJpYWxpemF0aW9ucy9tb2RlbHMvaW5jcmVtZW50YWwvb25fc2NoZW1hX2NoYW5nZS5zcWwpCiAgPiBjYWxsZWQgYnkgbWFjcm8gbWF0ZXJpYWxpemF0aW9uX2luY3JlbWVudGFsX2RlZmF1bHQgKG1hY3Jvcy9tYXRlcmlhbGl6YXRpb25zL21vZGVscy9pbmNyZW1lbnRhbC9pbmNyZW1lbnRhbC5zcWwpCiAgPiBjYWxsZWQgYnkgbW9kZWwgY3VzdG9tZXJzIChtb2RlbHMvY3VzdG9tZXJzLnNxbCmUaDhOaDloPCmBlH2UKGg/WD0FAAB7ewogICAgY29uZmlnKAogICAgICAgIG1hdGVyaWFsaXplZD0naW5jcmVtZW50YWwnLAogICAgICAgIHVuaXF1ZV9rZXk9J2N1c3RvbWVyX2lkJywKICAgICAgICBvbl9zY2hlbWFfY2hhbmdlPSdmYWlsJwogICAgKQp9fQoKCndpdGggY3VzdG9tZXJzIGFzICgKCiAgICBzZWxlY3QgKiBmcm9tIHt7IHJlZignc3RnX2N1c3RvbWVycycpIH19CgopLAoKb3JkZXJzIGFzICgKCiAgICBzZWxlY3QgKiBmcm9tIHt7IHJlZignc3RnX29yZGVycycpIH19CgopLAoKcGF5bWVudHMgYXMgKAoKICAgIHNlbGVjdCAqIGZyb20ge3sgcmVmKCdzdGdfcGF5bWVudHMnKSB9fQoKKSwKCmN1c3RvbWVyX29yZGVycyBhcyAoCgogICAgICAgIHNlbGVjdAogICAgICAgIGN1c3RvbWVyX2lkLAoKICAgICAgICBtaW4ob3JkZXJfZGF0ZSkgYXMgZmlyc3Rfb3JkZXIsCiAgICAgICAgbWF4KG9yZGVyX2RhdGUpIGFzIG1vc3RfcmVjZW50X29yZGVyLAogICAgICAgIGNvdW50KG9yZGVyX2lkKSBhcyBudW1iZXJfb2Zfb3JkZXJzCiAgICBmcm9tIG9yZGVycwoKICAgIGdyb3VwIGJ5IGN1c3RvbWVyX2lkCgopLAoKY3VzdG9tZXJfcGF5bWVudHMgYXMgKAoKICAgIHNlbGVjdAogICAgICAgIG9yZGVycy5jdXN0b21lcl9pZCwKICAgICAgICBzdW0oYW1vdW50KSBhcyB0b3RhbF9hbW91bnQKCiAgICBmcm9tIHBheW1lbnRzCgogICAgbGVmdCBqb2luIG9yZGVycyBvbgogICAgICAgICBwYXltZW50cy5vcmRlcl9pZCA9IG9yZGVycy5vcmRlcl9pZAoKICAgIGdyb3VwIGJ5IG9yZGVycy5jdXN0b21lcl9pZAoKKSwKCmZpbmFsIGFzICgKCiAgICBzZWxlY3QKICAgICAgICBjdXN0b21lcnMuY3VzdG9tZXJfaWQsCiAgICAgICAgY3VzdG9tZXJzLmZpcnN0X25hbWUsCiAgICAgICAgY3VzdG9tZXJzLmxhc3RfbmFtZSwKICAgICAgICBjdXN0b21lcl9vcmRlcnMuZmlyc3Rfb3JkZXIsCiAgICAgICAgY3VzdG9tZXJfb3JkZXJzLm1vc3RfcmVjZW50X29yZGVyLAogICAgICAgIGN1c3RvbWVyX29yZGVycy5udW1iZXJfb2Zfb3JkZXJzLAogICAgICAgIGN1c3RvbWVyX3BheW1lbnRzLnRvdGFsX2Ftb3VudCBhcyBsaWZldGltZV92YWx1ZSAtLSB0aGlzIGNvbHVtbiBuYW1lIGNoYW5nZWQKCiAgICBmcm9tIGN1c3RvbWVycwoKICAgIGxlZnQgam9pbiBjdXN0b21lcl9vcmRlcnMKICAgICAgICBvbiBjdXN0b21lcnMuY3VzdG9tZXJfaWQgPSBjdXN0b21lcl9vcmRlcnMuY3VzdG9tZXJfaWQKCiAgICBsZWZ0IGpvaW4gY3VzdG9tZXJfcGF5bWVudHMKICAgICAgICBvbiAgY3VzdG9tZXJzLmN1c3RvbWVyX2lkID0gY3VzdG9tZXJfcGF5bWVudHMuY3VzdG9tZXJfaWQKCikKCnNlbGVjdCAqIGZyb20gZmluYWyUaEGIaEKMCGRsdF9kYXRhlGhEjCV0ZXN0X2NiYWNmM2IyMDE5MTdhYzA2MTgzM2Y1NmI4M2VlYTI3lGhGXZQojAtqYWZmbGVfc2hvcJSMCWN1c3RvbWVyc5RlaEuMG21vZGVsLmphZmZsZV9zaG9wLmN1c3RvbWVyc5RoTYwLamFmZmxlX3Nob3CUaE+MKy9ob21lL3J1ZG9sZml4L3NyYy9kbHQvX3N0b3JhZ2UvamFmZmxlX3Nob3CUaFGMDWN1c3RvbWVycy5zcWyUaFOMFG1vZGVscy9jdXN0b21lcnMuc3FslGgXjAljdXN0b21lcnOUaFZoXGhdjAljdXN0b21lcnOUaF9oYimBlH2UKGgXjAZzaGEyNTaUaF+MQDZkMWNkMTUwNzhlZGI1Mjc0OTBjNzc2YWVhMGIxMTBiMjBkZjExNDYzNzRiOTk3MTVhYjAxNmQyNmJjOTJmYWGUdWJoZ2hqKYGUfZQoaG19lGhviGhdTmhETmhCTmhwXZRocn2UaHSMC2luY3JlbWVudGFslGh2fZRoeF2UaHpdlGh8fZRofn2UaIBOaIGMC2N1c3RvbWVyX2lklGiCjARmYWlslGiEfZR1YmiGfZRoiGiNc2hwXZRoj12UKF2UjA1zdGdfY3VzdG9tZXJzlGFdlIwKc3RnX29yZGVyc5RhXZSMDHN0Z19wYXltZW50c5RhZWiTXZRolV2UaJdomimBlH2UKGidXZQoaJ+MHG1hY3JvLmRidC5tYWtlX3RlbXBfcmVsYXRpb26UaKBooYwdbWFjcm8uZGJ0LnNob3VsZF9mdWxsX3JlZnJlc2iUjC9tYWNyby5kYnQuaW5jcmVtZW50YWxfdmFsaWRhdGVfb25fc2NoZW1hX2NoYW5nZZRoo2iijCFtYWNyby5kYnQuZ2V0X2NyZWF0ZV90YWJsZV9hc19zcWyUjBNtYWNyby5kYnQucnVuX3F1ZXJ5lIwgbWFjcm8uZGJ0LnByb2Nlc3Nfc2NoZW1hX2NoYW5nZXOUZWioXZQojB9tb2RlbC5qYWZmbGVfc2hvcC5zdGdfY3VzdG9tZXJzlIwcbW9kZWwuamFmZmxlX3Nob3Auc3RnX29yZGVyc5SMHm1vZGVsLmphZmZsZV9zaG9wLnN0Z19wYXltZW50c5RldWJoq4xtVGhpcyB0YWJsZSBoYXMgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgYSBjdXN0b21lciwgYXMgd2VsbCBhcyBzb21lIGRlcml2ZWQgZmFjdHMgYmFzZWQgb24gYSBjdXN0b21lcidzIG9yZGVyc5RorX2UKGojAQAAaLEpgZR9lChoF4wLY3VzdG9tZXJfaWSUaKuMKlRoaXMgaXMgYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgYSBjdXN0b21lcpRocn2UaLZOaLdOaHBdlGhtfZR1YowKZmlyc3RfbmFtZZRosSmBlH2UKGgXjApmaXJzdF9uYW1llGirjBtDdXN0b21lcidzIGZpcnN0IG5hbWUuIFBJSS6UaHJ9lGi2Tmi3TmhwXZRobX2UdWKMCWxhc3RfbmFtZZRosSmBlH2UKGgXjAlsYXN0X25hbWWUaKuMGkN1c3RvbWVyJ3MgbGFzdCBuYW1lLiBQSUkulGhyfZRotk5ot05ocF2UaG19lHVijAtmaXJzdF9vcmRlcpRosSmBlH2UKGgXjAtmaXJzdF9vcmRlcpRoq4wmRGF0ZSAoVVRDKSBvZiBhIGN1c3RvbWVyJ3MgZmlyc3Qgb3JkZXKUaHJ9lGi2Tmi3TmhwXZRobX2UdWKMEW1vc3RfcmVjZW50X29yZGVylGixKYGUfZQoaBeMEW1vc3RfcmVjZW50X29yZGVylGirjCxEYXRlIChVVEMpIG9mIGEgY3VzdG9tZXIncyBtb3N0IHJlY2VudCBvcmRlcpRocn2UaLZOaLdOaHBdlGhtfZR1YowQbnVtYmVyX29mX29yZGVyc5RosSmBlH2UKGgXjBBudW1iZXJfb2Zfb3JkZXJzlGirjDNDb3VudCBvZiB0aGUgbnVtYmVyIG9mIG9yZGVycyBhIGN1c3RvbWVyIGhhcyBwbGFjZWSUaHJ9lGi2Tmi3TmhwXZRobX2UdWKMEnRvdGFsX29yZGVyX2Ftb3VudJRosSmBlH2UKGgXjBJ0b3RhbF9vcmRlcl9hbW91bnSUaKuMKFRvdGFsIHZhbHVlIChBVUQpIG9mIGEgY3VzdG9tZXIncyBvcmRlcnOUaHJ9lGi2Tmi3TmhwXZRobX2UdWJ1aHJ9lGjBaMQpgZR9lGjHiHNiaMiMH2phZmZsZV9zaG9wOi8vbW9kZWxzL3NjaGVtYS55bWyUaMqMMHRhcmdldC9jb21waWxlZC9qYWZmbGVfc2hvcC9tb2RlbHMvY3VzdG9tZXJzLnNxbJRozE5ozoloz32UKGh0jAtpbmNyZW1lbnRhbJRogYwLY3VzdG9tZXJfaWSUaIKMBGZhaWyUdWjSR0HY87Jh8OAUaNN9lChodIwLaW5jcmVtZW50YWyUaIGMC2N1c3RvbWVyX2lklGiCjARmYWlslHVo1Vg4BQAACgoKd2l0aCBjdXN0b21lcnMgYXMgKAoKICAgIHNlbGVjdCAqIGZyb20gImRsdF9kYXRhIi4idGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyIuInN0Z19jdXN0b21lcnMiCgopLAoKb3JkZXJzIGFzICgKCiAgICBzZWxlY3QgKiBmcm9tICJkbHRfZGF0YSIuInRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjciLiJzdGdfb3JkZXJzIgoKKSwKCnBheW1lbnRzIGFzICgKCiAgICBzZWxlY3QgKiBmcm9tICJkbHRfZGF0YSIuInRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjciLiJzdGdfcGF5bWVudHMiCgopLAoKY3VzdG9tZXJfb3JkZXJzIGFzICgKCiAgICAgICAgc2VsZWN0CiAgICAgICAgY3VzdG9tZXJfaWQsCgogICAgICAgIG1pbihvcmRlcl9kYXRlKSBhcyBmaXJzdF9vcmRlciwKICAgICAgICBtYXgob3JkZXJfZGF0ZSkgYXMgbW9zdF9yZWNlbnRfb3JkZXIsCiAgICAgICAgY291bnQob3JkZXJfaWQpIGFzIG51bWJlcl9vZl9vcmRlcnMKICAgIGZyb20gb3JkZXJzCgogICAgZ3JvdXAgYnkgY3VzdG9tZXJfaWQKCiksCgpjdXN0b21lcl9wYXltZW50cyBhcyAoCgogICAgc2VsZWN0CiAgICAgICAgb3JkZXJzLmN1c3RvbWVyX2lkLAogICAgICAgIHN1bShhbW91bnQpIGFzIHRvdGFsX2Ftb3VudAoKICAgIGZyb20gcGF5bWVudHMKCiAgICBsZWZ0IGpvaW4gb3JkZXJzIG9uCiAgICAgICAgIHBheW1lbnRzLm9yZGVyX2lkID0gb3JkZXJzLm9yZGVyX2lkCgogICAgZ3JvdXAgYnkgb3JkZXJzLmN1c3RvbWVyX2lkCgopLAoKZmluYWwgYXMgKAoKICAgIHNlbGVjdAogICAgICAgIGN1c3RvbWVycy5jdXN0b21lcl9pZCwKICAgICAgICBjdXN0b21lcnMuZmlyc3RfbmFtZSwKICAgICAgICBjdXN0b21lcnMubGFzdF9uYW1lLAogICAgICAgIGN1c3RvbWVyX29yZGVycy5maXJzdF9vcmRlciwKICAgICAgICBjdXN0b21lcl9vcmRlcnMubW9zdF9yZWNlbnRfb3JkZXIsCiAgICAgICAgY3VzdG9tZXJfb3JkZXJzLm51bWJlcl9vZl9vcmRlcnMsCiAgICAgICAgY3VzdG9tZXJfcGF5bWVudHMudG90YWxfYW1vdW50IGFzIGxpZmV0aW1lX3ZhbHVlIC0tIHRoaXMgY29sdW1uIG5hbWUgY2hhbmdlZAoKICAgIGZyb20gY3VzdG9tZXJzCgogICAgbGVmdCBqb2luIGN1c3RvbWVyX29yZGVycwogICAgICAgIG9uIGN1c3RvbWVycy5jdXN0b21lcl9pZCA9IGN1c3RvbWVyX29yZGVycy5jdXN0b21lcl9pZAoKICAgIGxlZnQgam9pbiBjdXN0b21lcl9wYXltZW50cwogICAgICAgIG9uICBjdXN0b21lcnMuY3VzdG9tZXJfaWQgPSBjdXN0b21lcl9wYXltZW50cy5jdXN0b21lcl9pZAoKKQoKc2VsZWN0ICogZnJvbSBmaW5hbJRo14ho2F2UaNqMPiJkbHRfZGF0YSIuInRlc3RfY2JhY2YzYjIwMTkxN2FjMDYxODMzZjU2YjgzZWVhMjciLiJjdXN0b21lcnMilGjcTnViaN1OdWJljAxlbGFwc2VkX3RpbWWURz/WSTcAAAAAjARhcmdzlH2UKIwKd3JpdGVfanNvbpSIjAp1c2VfY29sb3JzlIiMDXByaW50ZXJfd2lkdGiUS1CMDXZlcnNpb25fY2hlY2uUiIwNcGFydGlhbF9wYXJzZZSIjA1zdGF0aWNfcGFyc2VylIiMDHByb2ZpbGVzX2RpcpSMJS9ob21lL3J1ZG9sZml4L3NyYy9kbHQvZGx0L2RidF9ydW5uZXKUjBpzZW5kX2Fub255bW91c191c2FnZV9zdGF0c5SJjBFldmVudF9idWZmZXJfc2l6ZZRKoIYBAIwFcXVpZXSUiYwIbm9fcHJpbnSUiYwTY2FjaGVfc2VsZWN0ZWRfb25seZSJjAdwcm9maWxllIwIcG9zdGdyZXOUjAR2YXJzlIw/eyJzb3VyY2VfZGF0YXNldF9uYW1lIjoidGVzdF9jYmFjZjNiMjAxOTE3YWMwNjE4MzNmNTZiODNlZWEyNyJ9lIwFd2hpY2iUjANydW6UjApycGNfbWV0aG9klGrOAgAAjBJpbmRpcmVjdF9zZWxlY3Rpb26UjAVlYWdlcpR1jAxnZW5lcmF0ZWRfYXSUaBxDCgfnARcRNQwKzOGUhZRSlHViLg==